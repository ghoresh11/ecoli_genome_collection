runs_ids = all_reads$run[all_reads$identifier %in% salipante$Sample.Accession]
runs_ids
## salipante
salipante = read.table("../ExPEC/salipante_sra_result.csv", sep = ",", header = T)
View(salipante)
## salipante
salipante = read.table("../ExPEC/salipante_sra_result.csv", sep = "\t", header = T)
salipante$Sample.Accession
salipante$Run
all_reads$identifier
all_reads$run
runs_ids = all_reads$run[all_reads$identifier %in% salipante$Run]
runs_ids
setwd("/Users/gh11/e_colis/genomes/READS/")
all_reads = read.table("all_run_ids.txt", header = T,
stringsAsFactors = F, sep = "\t")
## change to download only after I know what I already have using the metadata file
# to_download = unique(all_reads$run)
#
# write.table(x = to_download, file = "ids_to_download.txt", row.names = F,
#             col.names = F, quote = F)
## find out which IDs where not found and need artificial reads
artificals = unlist(lapply(list.files(pattern = "*_reads.txt"),
read.csv,header=F, stringsAsFactors = F, comment.char = ""))
artificals = artificals[which(!artificals %in% all_reads$identifier)]
length(artificals)
length(unique(artificals))
### create conversion table from reads to identfiers that I've been using
conversion = data.frame(identifier = character(0), reads = character(0), source = character(0))
## chen 2013
chen2013 = read.table("../ExPEC/Chen2013.csv", stringsAsFactors = F, header = T, sep = ",",
comment.char = "")
runs_ids = all_reads$run[all_reads$identifier %in% chen2013$SRA.accession]
accessions = tolower(chen2013$WGS.accession[match(all_reads$identifier[all_reads$identifier %in% chen2013$SRA.accession],
chen2013$SRA.accession)])
conversion = rbind(conversion,data.frame(identifier = accessions, reads = runs_ids, source = rep("chen2013", length(runs_ids))))
View(conversion)
conversion = rbind(conversion,
data.frame(identifier = salipante$Library_Name,
reads = salipante$Run,
source = rep("salipante", length(runs_ids))))
conversion = rbind(conversion,
data.frame(identifier = salipante$Library_Name,
reads = salipante$Run,
source = rep("salipante", dim(salipante)[1])))
## hazen2013
hazen2013 = read.table("hazen2013_reads.txt", header = F)
View(hazen2013)
View(pathogen_detection)
which(hazen2013$V1 %in% pathogen_detection$bioproject_acc)
runs_ids = all_reads$run[all_reads$identifier %in% pathogen_detection$Run]
## get all of pathogen detection up
pathogen_detection = read.table("../NCBI/pathogen_detection/pathogens.metadata.tsv", sep = ",",
header = T, stringsAsFactors = F, row.names = NULL, fill = T)
## get all of pathogen detection up
pathogen_detection = read.table("../NCBI/pathogen_detection/pathogens.metadata.tsv", sep = ",", comment.char = "",
header = T, stringsAsFactors = F, row.names = NULL, fill = T)
## get all of pathogen detection up
pathogen_detection = read.table("../NCBI/pathogen_detection/pathogens.metadata.tsv", sep = ",", comment.char = "",
header = T, stringsAsFactors = F, row.names = NULL, fill = T, quote = "")
View(pathogen_detection)
## get all of pathogen detection up
pathogen_detection = read.table("../NCBI/pathogen_detection/pathogens.csv", sep = ",", comment.char = "",
header = T, stringsAsFactors = F, row.names = NULL, fill = T, quote = "")
## get all of pathogen detection up
pathogen_detection = read.table("../NCBI/pathogen_detection/pathogens.csv", sep = ",", comment.char = "",
header = T, stringsAsFactors = F, row.names = NULL, fill = T)
View(pathogen_detection)
## get all of pathogen detection up
pathogen_detection = read.table("../NCBI/pathogen_detection/pathogen_detection_minimal.txt", sep = ",", comment.char = "",
header = T, stringsAsFactors = F, row.names = NULL, fill = T)
## get all of pathogen detection up
pathogen_detection =read.csv("../NCBI/pathogen_detection/pathogens.metadata.tsv", comment.char = "",
header = T, sep = "\t", stringsAsFactors = F)
which(hazen2013$V1 %in% pathogen_detection$bioproject_acc)
match(hazen2013$V1,pathogen_detection$bioproject_acc)
pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
pathogen_detection$asm_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
View(pathogen_detection)
pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
## get accessions / names from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (master[i] == "NULL") {
master[i] = strain[i]
}
}
i
master[3]
strain[3]
## get accessions / names from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
}
}
master
i = 9
master[i]
strsplit(x = master[i], split = ".", fixed = T)[[1]]
tolower(strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
## get accessions / names from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = tolower(strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
which(!hazen2013$V1 %in% pathogen_detection$bioproject_acc)
hazen2013[which(!hazen2013$V1 %in% pathogen_detection$bioproject_acc)]
hazen2013[which(!hazen2013$V1 %in% pathogen_detection$bioproject_acc),]
write.table( x = hazen2013[which(!hazen2013$V1 %in% pathogen_detection$bioproject_acc),],
file = "~/Desktop/not_in_path_dect", quote = F, col.names = F, row.names = F)
View(conversion)
hazen_conv = read.table("../Hazen2013_EHEC_EPEC/conversion.csv", sep = ",",
header = T, comment.char = "")
View(hazen_conv)
length(which(hazen_conv$source == "hazen2013?"))
69/138
## get accessions / names from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = tolower(strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
master
hazen2013$V1
## hazen2013
hazen2013 = read.table("hazen2013_reads.txt", header = F)
hazen_conv = read.table("../Hazen2013_EHEC_EPEC/conversion.csv", sep = ",",
header = T, comment.char = "")
## get accessions / names from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
cnt = 0
for (i in 1:length(hazen2013$V1)) {
if (master[i] %in% hazen_conv$reads) {
print(master[i])
cnt = cnt + 1
}
}
cnt
for (i in 1:length(hazen2013$V1)) {
if (master[i] %in% hazen_conv$reads) {
index = which(hazen_conv$reads == master[i])
hazen_conv[index,1] = tolower(master[i])
hazen_conv[index,2] = hazen2013$V1[i]
hazen_conv[index,3] = "hazen2013"
}
}
## conversion list with anything I could retrieve from NCBI
hazen_conv = read.table("../Hazen2013_EHEC_EPEC/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(hazen2013$V1)) {
if (master[i] %in% hazen_conv$reads) {
index = which(hazen_conv$reads == master[i])
hazen_conv[index,1] = tolower(master[i])
hazen_conv[index,2] = hazen2013$V1[i]
hazen_conv[index,3] = "hazen2013"
}
}
## hazen2013
hazen2013 = read.table("hazen2013_reads.txt", header = F)
## conversion list with anything I could retrieve from NCBI
hazen_conv = read.table("../Hazen2013_EHEC_EPEC/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(hazen2013$V1)) {
if (master[i] %in% hazen_conv$reads) {
index = which(hazen_conv$reads == master[i])
hazen_conv[index,1] = tolower(master[i])
hazen_conv[index,2] = hazen2013$V1[i]
hazen_conv[index,3] = "hazen2013!!"
}
}
hazen2013$V1
## hazen2013
hazen2013 = read.table("hazen2013_reads.txt", header = F, stringsAsFactors = F)
## conversion list with anything I could retrieve from NCBI
hazen_conv = read.table("../Hazen2013_EHEC_EPEC/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(hazen2013$V1)) {
if (master[i] %in% hazen_conv$reads) {
index = which(hazen_conv$reads == master[i])
hazen_conv[index,1] = tolower(master[i])
hazen_conv[index,2] = hazen2013$V1[i]
hazen_conv[index,3] = "hazen2013!!"
}
}
## hazen2013
hazen2013 = read.table("hazen2013_reads.txt", header = F, stringsAsFactors = F)
## conversion list with anything I could retrieve from NCBI
hazen_conv = read.table("../Hazen2013_EHEC_EPEC/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
strain = pathogen_detection$strain[match(hazen2013$V1,pathogen_detection$bioproject_acc)]
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(hazen2013$V1)) {
if (master[i] %in% hazen_conv$reads) {
index = which(hazen_conv$reads == master[i])
hazen_conv[index,1] = tolower(master[i])
hazen_conv[index,2] = hazen2013$V1[i]
hazen_conv[index,3] = "hazen2013"
}
}
## ingle2016 -> did the same process as Hazen
ingle_conv = read.table("../EPEC/Ingle2016/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## ingle2016 -> did the same process as Hazen
ingle2016 = read.table("ingle2016_reads.txt", stringsAsFactors = F, header = F)
View(ingle2016)
## ingle2016 -> did the same process as Hazen
ingle2016 = read.table("ingle2016_reads.txt", stringsAsFactors = F, header = F)
ingle_conv = read.table("../EPEC/Ingle2016/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## or strain name
length(master)
length(strain)
dim(ingle2016)
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
ingle2016 = read.table("ingle2016_reads.txt", stringsAsFactors = F, header = F)
ingle_conv = read.table("../EPEC/Ingle2016/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(ingle2016$V1)) {
if (master[i] %in% ingle_conv$reads) {
index = which(ingle_conv$reads == master[i])
ingle_conv[index,1] = tolower(master[i])
ingle_conv[index,2] = ingle_conv$V1[i]
ingle_conv[index,3] = "ingle2016!!"
}
} ## anything that remains with a "?" I couldn't connect back to the projects and will need artificial reads or to be
## looked up manually
View(ingle_conv)
## ingle2016 -> did the same process as Hazen
ingle2016 = read.table("ingle2016_reads.txt", stringsAsFactors = F, header = F)
ingle_conv = read.table("../EPEC/Ingle2016/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
master
for (i in 1:length(ingle2016$V1)) {
if (master[i] %in% ingle_conv$reads) {
index = which(ingle_conv$reads == master[i])
ingle_conv[index,1] = tolower(master[i])
ingle_conv[index,2] = ingle_conv$V1[i]
ingle_conv[index,3] = "ingle2016!!"
}
}
i
master[59]
index = which(ingle_conv$reads == master[i])
index
ingle_conv[index,1] = tolower(master[i])
ingle_conv[index,2] = ingle_conv$V1[i]
i
ingle2016 = read.table("ingle2016_reads.txt", stringsAsFactors = F, header = F)
ingle_conv = read.table("../EPEC/Ingle2016/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(ingle2016$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(ingle2016$V1)) {
if (master[i] %in% ingle_conv$reads) {
index = which(ingle_conv$reads == master[i])
ingle_conv[index,1] = tolower(master[i])
ingle_conv[index,2] = ingle2016$V1[i]
ingle_conv[index,3] = "ingle2016!!"
}
}
## others - should all be available on pathogen detection?
others = read.table("others_reads.txt", stringsAsFactors = F, header = F)
conversion = rbind(conversion, hazen_conv)
## looked up manually
conversion = rbind(conversion, ingle_conv)
master = pathogen_detection$wgs_master_acc[match(others$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(others$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
master
View(others)
## others - should all be available on pathogen detection?
others_conv = read.table("../Other_Ref_environment/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
others = read.table("others_reads.txt", stringsAsFactors = F, header = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(others$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(others$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
others_conv = read.table("../Other_Ref_environment/conversion.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
others = read.table("others_reads.txt", stringsAsFactors = F, header = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(others$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(others$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(others$V1)) {
if (master[i] %in% others_conv$reads) {
index = which(others_conv$reads == master[i])
ingle_conv[index,1] = tolower(master[i])
ingle_conv[index,2] = others$V1[i]
ingle_conv[index,3] = "ingle2016"
}
}
View(others_conv)
conversion = rbind(conversion, others_conv)
## get ALL of pathogen detection up to find the relevant names
pathogen_detection =read.csv("../NCBI/pathogen_detection/pathogens.metadata.tsv", comment.char = "",
header = T, sep = "\t", stringsAsFactors = F)
### create conversion table from reads to identfiers that I've been using
conversion = data.frame(identifier = character(0), reads = character(0), source = character(0))
merge_names("hazen2013_reads.txt","../Hazen2013_EHEC_EPEC/conversion.csv", "hazen2013")
merge_names <- function(reads_file, conv_file, name) {
reads = read.table(reads_file, header = F, stringsAsFactors = F)
## conversion list with anything I could retrieve from NCBI using the "summary" from batch
conv = read.table(conv_file, sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(reads$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(reads$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(reads$V1)) {
if (master[i] %in% conv$reads) {
index = which(conv$reads == master[i])
hazen_conv[index,1] = tolower(master[i])
hazen_conv[index,2] = reads$V1[i]
hazen_conv[index,3] = name
}
} ## anything that remains with a "?" I couldn't connect back to the projects and will need artificial reads or to be
## looked up manually
conversion = rbind(conversion, conv)
}
merge_names("hazen2013_reads.txt","../Hazen2013_EHEC_EPEC/conversion.csv", "hazen2013")
View(conversion)
View(conversion)
merge_names <- function(conversion, reads_file, conv_file, name) {
reads = read.table(reads_file, header = F, stringsAsFactors = F)
## conversion list with anything I could retrieve from NCBI using the "summary" from batch
conv = read.table(conv_file, sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(reads$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(reads$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
for (i in 1:length(reads$V1)) {
if (master[i] %in% conv$reads) {
index = which(conv$reads == master[i])
hazen_conv[index,1] = tolower(master[i])
hazen_conv[index,2] = reads$V1[i]
hazen_conv[index,3] = name
}
} ## anything that remains with a "?" I couldn't connect back to the projects and will need artificial reads or to be
## looked up manually
conversion = rbind(conversion, conv)
return(conversion)
}
conversion = merge_names(conversion, "hazen2013_reads.txt","../Hazen2013_EHEC_EPEC/conversion.csv", "hazen2013")
View(conversion)
conversion = merge_names(conversion, "ingle2016_reads.txt", "../EPEC/Ingle2016/conversion.csv", "ingle2016")
conversion = merge_names(conversion, "others_reads.txt","../Other_Ref_environment/conversion.csv", "others")
## no metadata file for others000, therefore just take what's in pathoge detection
reads = read.table("others000_reads.txt", header = F, stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(reads$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(reads$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = (strsplit(x = master[i], split = ".", fixed = T)[[1]][1])
}
}
master
## no metadata file for others000, therefore just take what's in pathoge detection
reads = read.table("others000_reads.txt", header = F, stringsAsFactors = F)
## other accessions  from pathogen detection
master = pathogen_detection$wgs_master_acc[match(reads$V1,pathogen_detection$bioproject_acc)] ## either master accession
strain = pathogen_detection$strain[match(reads$V1,pathogen_detection$bioproject_acc)] ## or strain name
for (i in 1:length(master)){
if (!is.na(master[i]) && master[i] == "NULL") {
master[i] = strain[i]
} else {
master[i] = tolower((strsplit(x = master[i], split = ".", fixed = T)[[1]][1]))
}
}
conv = data.frame(identifier = master,
reads = reads,
source = rep("others000", length(master)))
conversion = rbind(conv, conversion)
colnames(conv)
conv = data.frame(identifier = master,
reads = reads$V1,
source = rep("others000", length(master)))
conversion = rbind(conversion, conv)
View(conv)
View(all_reads)
View(all_reads)
