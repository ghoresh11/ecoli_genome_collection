cats = unique(c(cats,unique(unfit_pump$V14)))
df = data.frame(Cat = cats,RND_pump = rep(0,length(cats)),Crispr=rep(0,length(cats)))
for (c in cats){
row = which(df$Cat == c)
df$RND_pump[row] = length(which(unfit_pump$V14 == c))
df$Crispr[row] = length(which(unfit_crispr$V19 == c))
}
df.m = melt(df)
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity')
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity')
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity')
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity') + scale_x_discrete( expand = c(0, 0)) +
theme(axis.text.y = element_blank())+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity') + scale_x_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"))
library(RColorBrewer)
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(2,"Set1"))
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(3,"Set3"))
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(2,"Set3"))
ggplot(df.m, aes(x = Cat, y = value,fill=variable)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(3,"Set2"))
file_names <- dir(paste("/Users/gh11/posh/e_coli_collection/",type,"/results/combo",sep="")) #where you have your files
file_names
file_names <- dir(paste("/Users/gh11/posh/e_coli_collection/",type,"/results/combo",sep=""),full.names = T) #where you have your files
file_names
your_data_frame <- do.call(rbind,lapply(file_names,read.csv,header=F,stringsAsFactors = F,sep=","))
file_names <- dir(paste("/Users/gh11/posh/e_coli_collection/",type,"/results/combo",sep=""),full.names = T,pattern="*.txt") #where you have your files
your_data_frame <- do.call(rbind,lapply(file_names,read.csv,header=F,stringsAsFactors = F,sep=","))
View(your_data_frame)
file_names <- dir(paste("/Users/gh11/posh/e_coli_collection/",type,"/results/combo",sep=""),
full.names = T,pattern="*.txt") #where you have your files
your_data_frame <- do.call(rbind,lapply(file_names,read.csv,header=T,stringsAsFactors = F,sep=","))
lengths = c(unfit_pump$V5,your_data_frame$Hit_Length)
hist(lengths)
abline(v = 900)
abline(v = 1200)
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(3,"Set2"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(4,"Set2"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
scale_fill_manual(values = brewer.pal(4,"Set1"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"))
basesize = 14
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1")) + xlab("") + ylab("Unfit HMM hits") +
scale_fill_discrete(breaks=c("Downstream length","Hit Length","Delta","Upstream Length"))
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1")) + xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"),breaks=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize)) +
scale_fill_manual(values = brewer.pal(4,"Set1"),labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize),
legend.title=element_blank()) +
scale_fill_manual(values = brewer.pal(4,"Set1"),
labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Unfit HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize),
legend.title=element_blank()) +
scale_fill_manual(values = brewer.pal(4,"Set1"),
labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("#Filtered HMM hits")
ggplot(df.m, aes(x = variable, y = value,fill=Cat)) +
geom_bar(stat='identity') + scale_y_discrete( expand = c(0, 0)) +
theme_bw() + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
text = element_text(size = basesize),
legend.title=element_blank()) +
scale_fill_manual(values = brewer.pal(4,"Set1"),
labels=c("Downstream length","Hit Length","Delta","Upstream Length")) +
xlab("") + ylab("Filtered HMM hits")
unfit_RND =  read.table("/Users/gh11/posh/e_coli_collection/RND_pump_flex/unfit/1UNFIT_(1H).txt",
sep=",",stringsAsFactors = F, header = T)
View(unfit_RND)
which(unfit_RND$Reason1 == "hit length")
length(which(unfit_RND$Reason1 == "hit length"))
length(which(unfit_RND$Reason1 == "Upstream length"))
length(which(unfit_RND$Reason1 == "No adjacent upstream ORF"))
unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")]
hist(unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")])
max(unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")])
min(unfit_RND$Hit_Length[which(unfit_RND$Reason1 == "hit length")])
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/combo_matrix.txt",
sep=",",header=T,row.names = 1)
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/matrix_combo.txt",
sep=",",header=T,row.names = 1)
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/matrix_combo.txt",
sep=",",header=T,row.names = 1,comment.char = "")
View(toxins)
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE)
toxins = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/results/combo/matrix_combo.txt",
sep=",",header=T,row.names = 1,comment.char = "")
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE)
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE, tol = 0)
toxins.pca = prcomp(toxins,center = TRUE, scale. = TRUE, tol = sqrt(.Machine$double.eps))
toxins[,sapply(toxins, function(v) var(v, na.rm=TRUE)!=0)]
toxins_test = toxins[,sapply(toxins, function(v) var(v, na.rm=TRUE)!=0)]
toxins.pca = prcomp(toxins_test,center = TRUE, scale. = TRUE)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16)
metadata = read.table("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/metadata.csv",sep=",",header = T, comment.char = "")
metadata$Strain
metadata = metadata[match(rownames(toxins.pca$x),metadata$Strain),]
col_array = brewer.pal(4,"Set2")
library(RColorBrewer)
col_array = brewer.pal(4,"Set2")
col = as.character(unlist(metadata$Phylogroup))
col
col = replace(col, col=="kpi", col_array[1])
col = replace(col, col=="kpii", col_array[2])
col = replace(col, col=="kpiii", col_array[3])
col = replace(col, col=="kpiv", col_array[4])
col
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array,pch=16)
plot(toxins.pca$x[,c(2,3)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array,pch=16)
plot(toxins.pca$x[,c(1,3)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(3,4)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(3,1)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(2,1)],cex=1.2,lwd=2,pch=16,col = col)
display.brewer.all(5)
display.brewer.all(10)
display.brewer.all(8)
col_array = brewer.pal(8,"Dark2")
col = as.character(unlist(metadata$Phylogroup))
col = replace(col, col=="kpi", col_array[1])
col = replace(col, col=="kpii", col_array[3])
col = replace(col, col=="kpiii", col_array[4])
col = replace(col, col=="kpiv", col_array[2])
#style(better)
#par(mfrow=c(1,1))
plot(toxins.pca$x[,c(2,1)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array[c(1,3,4,2)],pch=16)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
legend("topright",legend = c("KpI","KpII","KpIII","KpIV"), col = col_array[c(1,3,4,2)],pch=16)
col = as.character(unlist(metadata$Acquisition))
col
col_array = brewer.pal(8,"Dark2")
col = as.character(unlist(metadata$Acquisition))
col = replace(col, col=="nosocomial", col_array[1])
col = replace(col, col=="community", col_array[3])
col = replace(col, col=="unknown", col_array[4])
col = replace(col, col=="kpiv", col_array[2])
#style(better)
#par(mfrow=c(1,1))
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(2,3)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(3,4)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(4,5)],cex=1.2,lwd=2,pch=16,col = col)
plot(toxins.pca$x[,c(1,2)],cex=1.2,lwd=2,pch=16,col = col)
toxins[,1]
View(toxins)
plot(toxins[,1])
read.newick()
install.packages("phytools")
library(phytools)
read.tree("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/prev/tree/klebsiella_diverse_tree")
tree = read.tree("/Users/gh11/Toxin_Antitoxin_Systems/klebsiella_diverse/prev/tree/klebsiella_diverse_tree")
tree$tip.label
tree$node.label
tree$edge.length
plot(tree)
tree$edge.length
dim(tree$edge.length)
length(tree$edge.length)
tree$Nnode
tree$edge
dim(tree$edge)
length(tree$edge.length)
edges = cbind(tree$edge,tree$edge.length)
View(edges)
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = cbind(tree$edge,tree$edge.length)
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = cbind(tree$edge,tree$edge.length)
colnames(edges)
header(edges)
edges = data.frame(cbind(tree$edge,tree$edge.length))
colnames(edges) = c("Node 1","Node 2", "Weight")
edges = data.frame(cbind(tree$edge,tree$edge.length))
colnames(edges) = c("Node_1","Node_2", "Weight")
mrca = mrca(tree)
mrca
dim(mrca)
mrca[1,]
mrca[2,]
mrca[3,]
mrca[4,]
mrca = mrca(tree,full=TRUE)
mrca[1,]
mrca
dim(mrca)
dim(toxins)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260,rownames = metadata$Strain)
TA_dist_mat = data.frame(matrix(0 , nrow = 260, ncol = 260), stringsAsFactors = F )
row.names(TA_dist_mat) = metadata$Strain
col.names(TA_dist_mat) = metadata$Strain
colnames(TA_dist_mat) = metadata$Strain
View(TA_dist_mat)
View(toxins)
i = 1
j = 2
strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
strain1
strain2
dist = toxins[i,] - toxins[j,]
dist
dist = abs(toxins[i,] - toxins[j,])
dist
dist = sum(abs(toxins[i,] - toxins[j,]))
dist
TA_dist_mat = data.frame(matrix(0 , nrow = 260, ncol = 260), stringsAsFactors = F )
row.names(TA_dist_mat) = rownames(toxins)
colnames(TA_dist_mat) = rownames(toxins)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j]
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
print(dist)
}
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
TA_dist_mat[j,i] = dist
}
}
}
View(TA_dist_mat)
hist(lower.tri(TA_dist_mat))
hist(as.numeric(unlist(lower.tri(TA_dist_mat))))
lower.tri(TA_dist_mat)
hist(as.numeric(unlist(lower.tri(TA_dist_mat[TA_dist_mat]))))
TA_dist_mat[lower.tri(TA_dist_mat)
]
hist(as.numeric(unlist(TA_dist_mat[lower.tri(TA_dist_mat)])))
hist(as.numeric(unlist(TA_dist_mat)), main = "Distance between every two strains", xlab="Distance")
order = read.table("/Users/gh11/Desktop/new phd prop/order.txt",sep="",comment.char = "")
View(order)
t = rnorm(n = 1000,mean = 100, sd = 10)
hist(t, xlab = "Length",main="", breaks = 25)
setwd("/Users/gh11/e_colis/genomes/5_QC/beep_mash/")
df = read.table("single2_binned.txt", sep = ",", header = F, stringsAsFactors = F)
df = read.table("single2_binned.txt", sep = ",", header = F, stringsAsFactors = F, comment.char = "", quote = "")
View(df)
df2 = read.table("all_gff_binned.txt", sep = ",", header = F, stringsAsFactors = F, comment.char = "", quote = "")
dim(df2)
dim(df1)
dim(df)
length(unique(df$V2))
length(unique(df2$V2))
df1 = df[match(df$V1, df2$V2),]
View(df1)
df1 = df[match(df$V1, df2$V1),]
View(df2)
View(df1)
View(df2)
df1 = df[match(df2$V1, df$V1),]
df1 = df2[match(df2$V1, df$V1),]
df1 = df[match(df2$V1, df$V1),]
library(ggplot2)
library(RColorBrewer)
setwd("/Users/gh11/e_colis/gff_summaries/")
metadata = read.table("../FINAL_METADATA_MASH.csv", sep = "\t", quote = "",
comment.char = "", header = T, stringsAsFactors = F)
gff_summary = read.table("gff_summary.csv", sep = ",", comment.char = "",
quote = "", header = T, stringsAsFactors = F)
gff_summary = gff_summary[match(metadata$ID, gff_summary$ID),]
gff_summary = data.frame(ID = metadata$ID,
Pathotype = metadata$Pathotype,
Continent =  metadata$Continent,
Year = metadata$Year,
Isolation = metadata$Isolation,
MASH  = metadata$MASH,
ST = metadata$ST,
Length = metadata$length,
Contigs = metadata$num_contigs,
gff_summary[,seq(3,15)],
stringsAsFactors = F)
common_STs = data.frame(table(gff_summary$ST), stringsAsFactors = F)
common_STs = common_STs[order(common_STs$Freq, decreasing = T),]
common_STs = common_STs$Var1[1:20]
common_STs = gff_summary[which(gff_summary$ST %in% common_STs),]
common_MASH = data.frame(table(gff_summary$MASH), stringsAsFactors = F)
common_MASH = common_MASH[order(common_MASH$Freq, decreasing = T),]
common_MASH = common_MASH$Var1[1:20]
common_MASH = gff_summary[which(gff_summary$MASH %in% common_MASH),]
common_MASH$MASH = as.character(common_MASH$MASH)
### Connection between the size of the genome and number of genes
## number of contigs and number of genes
ggplot(gff_summary, aes(x = Length, y = Contigs)) + geom_point() + theme_bw(base_size = 20)
ggplot(gff_summary, aes(x = Length, y = cds)) + geom_point() + theme_bw(base_size = 20)
ggplot(gff_summary, aes(x = Contigs, y = cds)) + geom_point() + theme_bw(base_size = 20)
## Connection between genome length and tyoes
ggplot(gff_summary, aes(x = Pathotype, y = Length)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(gff_summary, aes(x = Continent, y = Length)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(common_STs, aes(x = ST, y = Length)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl",  geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## to go to apairwise wilcox test
pairwise.wilcox.test(as.numeric(common_STs$Length), common_STs$ST, paired = F,p.adjust.method = "fdr")
ggplot(common_MASH, aes(x = MASH, y = Length)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl",  geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
pairwise.wilcox.test(as.numeric(common_MASH$Length), common_MASH$MASH, paired = F,p.adjust.method = "fdr")
#
# barplot_length_by_variable<- function(df){
#   length_bins = seq(min(df$Length),max(df$Length), by = 0.2)
#   length_bins = c(0, length_bins, 100)
#   vec = rep("",dim(df)[1])
#   for (i in 2:length(length_bins)){
#     vec[which(df$Length > length_bins[i-1] & df$Length <= length_bins[i])] = length_bins[i]
#   }
#
#   ### barplot colored by a specific variable
#   df = cbind(df, length_bins = vec)
#   df2 = data.frame(table(df$length_bins, df$ST))
#   df2$Var1 = factor(df2$Var1, as.character(seq(min(df$Length),max(df$Length), by = 0.2)))
#   ggplot(df2, aes(x = Var1, y = Freq, fill = Var2)) + geom_bar(stat = "identity")
# }
# barplot_length_by_variable(common_STs)
# barplot_length_by_variable(common_MASH)
## How many genes does E. coli have in general?
ggplot(gff_summary, aes(x = cds)) + geom_histogram(bins = 40) + theme_bw(base_size = 20)
ggplot(gff_summary, aes(x = Pathotype, y = cds)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl", mult=1, geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(gff_summary, aes(x = Continent, y = cds)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl",  geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(common_STs, aes(x = ST, y = cds)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl",  geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(common_MASH, aes(x = MASH, y = cds)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl",  geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
### rather than looking at CDS -> look at the specific elements I dug out
ggplot(gff_summary, aes(x = phage)) + geom_histogram(bins = 40) + theme_bw(base_size = 20)
ggplot(gff_summary, aes(x = Pathotype, y = phage)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl", mult=1, geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(gff_summary, aes(x = Continent, y = phage)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl", mult=1, geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(common_STs, aes(x = ST, y = phage)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl",  geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(common_MASH, aes(x = MASH, y = phage)) + geom_violin() + theme_bw(base_size = 20)+
stat_summary(fun.data="mean_sdl",  geom="crossbar", width=0.1 ) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
### see if there is a correlation between the presence of two genes
for (i in 8:(dim(gff_summary)[2]-1)){
for (j in (i+1):dim(gff_summary)[2]){
correlation = cor(gff_summary[,i], gff_summary[,j])
if (correlation> 0.5 || correlation < -0.5){
plot(gff_summary[,i],gff_summary[,j], pch = 16,
xlab = colnames(gff_summary)[i], ylab = colnames(gff_summary)[j],
main = paste("Pearson:", correlation))
}
}
}
## see if one group is enriched to having more of a specific kind of gene?
### PATHOTYPE
for (i in 8:(dim(gff_summary)[2])){
boxplot(gff_summary[,i] ~ gff_summary$Pathotype, pch = 16,
xlab = colnames(gff_summary)[i], ylab = "Pathotype",
main = colnames(gff_summary)[i])
}
## see if one group is enriched to having more of a specific kind of gene?
### GEOGRAPHY
for (i in 8:(dim(gff_summary)[2])){
boxplot(gff_summary[,i] ~ gff_summary$Continent, pch = 16,
xlab = colnames(gff_summary)[i], ylab = "Continent",
main = colnames(gff_summary)[i])
}
### MASH cluster
for (i in 8:(dim(common_MASH)[2])){
boxplot(common_MASH[,i] ~ common_MASH$MASH, pch = 16,
xlab = colnames(common_MASH)[i], ylab = "MASH cluster",
main = colnames(common_MASH)[i])
}
### ST
for (i in 8:(dim(common_STs)[2])){
boxplot(common_STs[,i] ~ common_STs$ST, pch = 16,
xlab = colnames(common_STs)[i], ylab = "ST",
main = colnames(common_STs)[i])
}
### see if there is a correlation between the presence of two genes
for (i in 8:(dim(gff_summary)[2]-1)){
for (j in (i+1):dim(gff_summary)[2]){
correlation = cor(gff_summary[,i], gff_summary[,j])
plot(gff_summary[,i],gff_summary[,j], pch = 16,
xlab = colnames(gff_summary)[i], ylab = colnames(gff_summary)[j],
main = paste("Pearson:", correlation))
}
}
