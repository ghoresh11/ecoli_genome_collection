plot_on_tree <- function(filename, desc_file, tree, signif, display_names = T){
df = read.table(filename, sep = ",", header = T, comment.char = "",
quote = "", stringsAsFactors = F, row.names = 1)
md = orig_md[match(rownames(df), rownames(orig_md)),]
dfs = lapply(X = unique(md$Poppunk_cluster), FUN = get_gene_for_one_cluster, md = md, df = df)
res = do.call(rbind, dfs)
res = dcast(res, cluster ~ gene, value.var = "freq")
rownames(res) = res[,1]
res = res[,-1]
res = res[match(tree$tip.label, rownames(res)),]
## change the order of the columns
res = res[,order(colSums(res), decreasing = T)]
res = res[,-which(sapply(FUN = max, X = res)<0.1)] ## to remove very rare genes
## create an output file for the cluster summaries
df_out = data.frame(cluster = rownames(res),
label = rep("-", dim(res)[1]), stringsAsFactors = F)
for (i in 1:dim(res)[1]) {
props = sort(round(res[i,][which(res[i,] >0)], digits = 2), decreasing = T)
df_out$label[i] = paste(names(props), props, sep = ":", collapse = "/")
}
write.table(df_out, file = paste(filename, "_per_cluster.csv", sep = ""), col.names = T, row.names = F, quote = F, sep = ",")
descs = read.table(desc_file, sep = ",", header = T, stringsAsFactors = F, quote = "")
new_labs = descs$gene[match(colnames(res), descs$identifier)]
labs = c()
for (l in new_labs) {
while (l %in% labs) {
l = paste(l, "^", sep = "")
}
labs = c(labs,l)
}
colnames(res) = labs
col.order <- rev(hclust(dist(t(res)))$order)
res = res[,col.order]
tip_labels = tree$tip.label
for (i in 1:length(tip_labels)) {
if (tip_labels[i] %in% signif){
tip_labels[i] = paste(tip_labels[i], "*", sep = "")
}
}
tree$tip.label = tip_labels
rownames(res) = tip_labels
p = ggtree(tree)  +
theme(legend.position="right") + geom_tiplab(align = T)
# tree$tip.label = factor(tree$tip.label, tree$tip.label)
p2 = gheatmap(p = p, data = res, offset = 0.1, width=5, color = "black",
high = "#023858", low = "#fff7fb", colnames = display_names,
font.size = 4, colnames_angle = 90)
return(p2)
}
### AMR genes
amr_results = read.table("/Users/gh11/poppunk_pangenome/7_AMR_vir_plasmid/results/resfinder.csv", sep = ",",
comment.char = "", stringsAsFactors = F, header = T, row.names = 1)
amr_results[amr_results == "1*"] = 0
amr_results_2 = mutate_all(amr_results, function(x) as.numeric(as.character(x)))
rownames(amr_results_2) = rownames(amr_results)
amr_results = amr_results_2
## all amr
all_amr = read.table("/Users/gh11/poppunk_pangenome/7_AMR_vir_plasmid/DBs/break_names/resfinder_genes_fixed.csv", sep = ",",
header = T, stringsAsFactors = F, comment.char = "", quote = "")
all_amr = all_amr[match(colnames(amr_results),all_amr$identifier),]
antibiotic_classes = read.table("antibiotic_classes.csv", sep = ",", quote = "", comment.char = "", header = T, stringsAsFactors = F)
# # 1.Count how many antibiotic classes each strain is resistant to
# antibiotic_classes = data.frame(strain = rownames(amr_results),
#                                 count = rep(0, dim(amr_results)[1]),
#                                 names =  rep("-", dim(amr_results)[1]), stringsAsFactors = F)
#
# for (i in 1:dim(antibiotic_classes)[1]) {
#   print(i)
#   results =  unique(all_amr$antimicrobial.category[which(amr_results[i,]>0)])
#   if (length(results) == 0) {next}
#   antibiotic_classes$names[i] = paste(sort(results), collapse = ";")
#   antibiotic_classes$count[i] = length(results)
# }
# antibiotic_classes$PopPunk_cluster = orig_md$Poppunk_cluster[match(antibiotic_classes$strain, rownames(orig_md))]
# antibiotic_classes$Phylogroup = cluster_graphics$Phylogroup[match(antibiotic_classes$PopPunk_cluster, cluster_graphics$Cluster)]
median_classes = aggregate(x = antibiotic_classes$count, by = list(antibiotic_classes$PopPunk_cluster), median)
cluster_graphics$MDR = rep("No",dim(cluster_graphics)[1])
cluster_graphics$MDR[which(cluster_graphics$Cluster %in% median_classes$Group.1[median_classes$x >=3])] = "Yes"
# antibiotic_classes$MDR = cluster_graphics$MDR[match(antibiotic_classes$PopPunk_cluster, cluster_graphics$Cluster)]
# write.table(antibiotic_classes, file = "antibiotic_classes.csv", sep = ",", col.names = T, row.names = F, quote = F)
A = plot_boxplot_amr(antibiotic_classes, breaks = seq(from = 0, to = 8, by = 2), ylab = "Antimicrobial categories")
signif = cluster_graphics$Cluster[cluster_graphics$MDR == "Yes"]
B = plot_on_tree("results/resfinder.csv","DBs/break_names/resfinder_genes_fixed.csv", tree, signif )
grid.arrange(A + theme(legend.position = "bottom") + ylab("Antimicrobial Classes") + ggtitle("A"),
B + ggtitle("B"),  layout_matrix = rbind(c(1,2,2)))
### virulence genes
vir_results = read.table("/Users/gh11/poppunk_pangenome/7_AMR_vir_plasmid/results/virulence.csv", sep = ",",
comment.char = "", stringsAsFactors = F, header = T, row.names = 1)
vir_results[vir_results == "1*"] = 0
vir_results_2 = mutate_all(vir_results, function(x) as.numeric(as.character(x)))
rownames(vir_results_2) = rownames(vir_results)
vir_results = vir_results_2
pathotype_genes = read.table("DBs/break_names/pathotypes.csv", sep = ",", header = T, stringsAsFactors = F)
all_virulence_genes = read.table("DBs/break_names/virulence.csv", sep = ",", header = T, stringsAsFactors = F)
identifiers = all_virulence_genes$identifier[which(all_virulence_genes$gene %in% pathotype_genes$Gene)]
filtered_vir_results =  vir_results[,colnames(vir_results) %in% identifiers]
## predict the pathotype of isolate
pathotypes = data.frame(strain = rownames(filtered_vir_results),
pathotype = orig_md$Pathotype[match(rownames(filtered_vir_results), rownames(orig_md))],
PopPUNK_cluster = orig_md$Poppunk_cluster[match(rownames(filtered_vir_results), rownames(orig_md))],
stringsAsFactors = F)
pathotypes = cbind(pathotypes, filtered_vir_results)
## change the pathotype column to include only clear ones
pathotypes$pathotype[which(!pathotypes$pathotype %in% c("nd","expec","epec","stec","etec","eaec"))] = "nd"
pathotypes$pathotype = toupper(pathotypes$pathotype)
## this works for ExPEC
for (i in 1:length(pathotypes$strain)) {
strain = pathotypes$strain[i]
index = which(rownames(orig_md) == strain)
if (orig_md$Isolation[index] %in% c("blood","urine")) {
if (!pathotypes$pathotype[i] %in% c("EXPEC","ND")) { ## sanity check
print(pathotypes$pathotype[i])
}
pathotypes$pathotype[i] = "ExPEC"
}
}
for (gene in pathotype_genes$Gene) {
print(gene)
p = pathotype_genes$Pathotype[pathotype_genes$Gene == gene]
curr_idents = all_virulence_genes$identifier[which(all_virulence_genes$gene == gene)]
for (ident in curr_idents) {
for (i in 1:dim(pathotypes)[1]) {
if (pathotypes$pathotype[i] == "ExPEC") {next}
if (pathotypes[i,which(colnames(pathotypes) == ident)] == 1) {
if (pathotypes$pathotype[i] == "ND") {
pathotypes$pathotype[i] = p
} else if (!grepl(x = pathotypes$pathotype[i], pattern = p, fixed = T)) {
pathotypes$pathotype[i] = paste(pathotypes$pathotype[i], "/",p)
}
}
}
}
}
## correct to include pathotypes that are combinations of other pathotypes
for (i in 1:dim(pathotypes)[1]) {
if (grepl(x = pathotypes$pathotype[i], pattern = "EPEC", fixed = T) &&
grepl(x = pathotypes$pathotype[i], pattern = "STEC", fixed = T) ) {
pathotypes$pathotype[i] = "EHEC"
}
else if (grepl(x = pathotypes$pathotype[i], pattern = "STEC", fixed = T) &&
grepl(x = pathotypes$pathotype[i], pattern = "EAEC", fixed = T) ) {
pathotypes$pathotype[i] = "EAEC+STEC"
}
elements = unlist(strsplit(x = pathotypes$pathotype[i], split = " / ", fixed = T))
if (("EPEC" %in% elements) && ("aEPEC" %in% elements) && length(elements) == 2) {
pathotypes$pathotype[i] = "EPEC"
}
else if ( ("ETEC" %in% elements) &&
(("EPEC" %in% elements) || ("aEPEC" %in% elements))) {
pathotypes$pathotype[i] = "EPEC/ETEC"
}
}
pathotypes$pathotype[pathotypes$pathotype %in% c("EPEC","aEPEC")] = "aEPEC/EPEC"
write.table(x = pathotypes, file = "pathotype_per_isolate.csv", sep = ",",
col.names = T, row.names = F, quote = F)
counts_per_cluster = table(pathotypes$PopPUNK_cluster,pathotypes$pathotype)
pathotype_per_cluster = data.frame(PopPUNK_cluster = rownames(counts_per_cluster),
Pathotype_details = rep("", dim(counts_per_cluster)[1]),
Pathotype_label =  rep("", dim(counts_per_cluster)[1]),
stringsAsFactors = F)
for (i in 1:dim(counts_per_cluster)[1]) {
counts_per_cluster[i,] = round(counts_per_cluster[i,]/sum(counts_per_cluster[i,]), digits = 2)
chosen = which(counts_per_cluster[i,] > 0)
pathotype_per_cluster$Pathotype_details[i] = paste(colnames(counts_per_cluster)[chosen], "(",
counts_per_cluster[i,chosen],")", sep = "", collapse = ";")
chosen = which(counts_per_cluster[i,] > 0.5)
if (length(chosen) == 0) {
pathotype_per_cluster$Pathotype_label[i] = "No prevalent pathotype"
next
}
pathotype_per_cluster$Pathotype_label[i] = colnames(counts_per_cluster)[chosen]
}
write.table(x = pathotype_per_cluster, file = "pathotypes_per_cluster.csv", sep = ",",
col.names = T, row.names = F, quote = F)
### create the boxplot
vir_per_isolate = data.frame(strain = rownames(vir_results),num_genes = rowSums(vir_results), stringsAsFactors = F)
vir_per_isolate$PopPUNK_cluster = orig_md$Poppunk_cluster[match(vir_per_isolate$strain, rownames(orig_md))]
vir_per_isolate$PopPUNK_cluster = factor(vir_per_isolate$PopPUNK_cluster, cluster_order)
vir_per_isolate$pathotype = pathotype_per_cluster$Pathotype_label[match(vir_per_isolate$PopPUNK_cluster, pathotype_per_cluster$PopPUNK_cluster)]
vir_per_isolate$pathotype = factor(vir_per_isolate$pathotype, c("ExPEC", "EHEC", "STEC","aEPEC/EPEC","EAEC","EIEC","No prevalent pathotype","ND"))
A = ggplot(vir_per_isolate, aes(x = PopPUNK_cluster, y = num_genes, fill = pathotype)) + geom_boxplot() +
coord_flip() + theme_classic(base_size = 14) + ylab("Virulence factors") +xlab("PopPUNK Cluster") +
scale_y_continuous(breaks = seq(from= 0, to = 25, by = 4))+
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
vir_per_isolate$phylogroup = cluster_graphics$Phylogroup[match(vir_per_isolate$PopPUNK_cluster, cluster_graphics$Cluster)]
ggplot(vir_per_isolate, aes( y = num_genes, x = pathotype)) + geom_boxplot() +
coord_flip() + theme_classic(base_size = 14) + ylab("Virulence genes") +xlab("Pathotype") +
scale_y_continuous(breaks = seq(from= 0, to = 25, by = 4))
B = plot_on_tree("results/virulence.csv","DBs/break_names/virulence.csv", tree, c(),display_names = F)
B
grid.arrange(A, B, layout_matrix = rbind(c(1,1,2,2,2)))
### relationship between resistance and virulence
View(vir_per_isolate)
View(antibiotic_classes)
antibiotic_classes$strain == vir_per_isolate$strain
### relationship between resistance and virulence
vir_and_amr = cbind(antibiotic_classes, vir_per_isolate[,-1])
View(vir_and_amr)
### relationship between resistance and virulence
vir_and_amr = cbind(antibiotic_classes[,-4], vir_per_isolate[,-1])
### relationship between resistance and virulence
vir_and_amr = cbind(antibiotic_classes[,-c(4,5)], vir_per_isolate[,-1])
ggplot(vir_and_amr, aes(x = count, y = num_genes)) + geom_point()
ggplot(vir_and_amr, aes(x = count, y = num_genes)) + geom_jitter()
ggplot(vir_and_amr, aes(x = count, y = num_genes)) + geom_jitter() + geom_vline(xintercept = 3)
ggplot(vir_and_amr, aes(x = count, y = num_genes)) + geom_jitter() + geom_vline(xintercept = 3, colour = "red")
ggplot(vir_and_amr, aes(x = count, y = num_genes, fill = pathotype)) + geom_jitter() + geom_vline(xintercept = 3, colour = "red")
ggplot(vir_and_amr, aes(x = count, y = num_genes, color = pathotype)) + geom_jitter() + geom_vline(xintercept = 3, colour = "red")
ggplot(vir_and_amr, aes(x = count, y = num_genes, color = pathotype)) + geom_jitter() + geom_vline(xintercept = 3, colour = "red") +
scale_color_brewer(palette = "Set2")
ggplot(vir_and_amr, aes(x = count, y = num_genes, color = pathotype)) + geom_jitter() + geom_vline(xintercept = 3, colour = "red") +
scale_color_brewer(palette = "Set2") + theme_bw(base_size = 14)
ggplot(vir_and_amr, aes(x = count, y = num_genes, color = pathotype)) + geom_jitter() + geom_vline(xintercept = 3, colour = "red") +
scale_color_brewer(palette = "Set2") + theme_bw(base_size = 14) + xlab("Antimicrobial classes") +
ylab("Virulence factors")
aggregate(x = vir_and_amr$count, by = list(vir_and_amr$pathotype), FUN = mean)
ggplot(vir_and_amr, aes(y = count, x = pathotype)) + geom_jitter() + theme_bw(base_size = 14)
ggplot(vir_and_amr, aes(y = count, x = pathotype)) + geom_boxplot() + theme_bw(base_size = 14)
ggplot(vir_and_amr, aes(y = count, x = pathotype)) + geom_violin() + theme_bw(base_size = 14)
aggregate(x = vir_and_amr$count, by = list(vir_and_amr$PopPUNK_cluster), FUN = mean)
aggregate(x = vir_and_amr$=num_genes, by = list(vir_and_amr$PopPUNK_cluster), FUN = median)
aggregate(x = vir_and_amr$num_genes, by = list(vir_and_amr$PopPUNK_cluster), FUN = median)
amr =  aggregate(x = antibiotic_classes$count, by = list(antibiotic_classes$PopPunk_cluster), FUN = median)
vir = aggregate(x = vir_per_isolate$num_genes, by = list(vir_per_isolate$PopPUNK_cluster), FUN = median)
amr = amr[match(vir$Group.1, amr$Group.1),]
amr =  aggregate(x = antibiotic_classes$count, by = list(antibiotic_classes$PopPunk_cluster), FUN = median)
vir = aggregate(x = vir_per_isolate$num_genes, by = list(vir_per_isolate$PopPUNK_cluster), FUN = median)
amr = amr[match(vir$Group.1, amr$Group.1),]
View(amr)
vir$Group.1[1:5]
vir_and_amr = data.frame(PopPUNK_cluster = amr$Group.1,
amr = amr$x,
vir = vir$x,
pathotype = pathotype_per_cluster$Pathotype_label[match(amr$Group.1, pathotype_per_cluster$Pathotype_label)],
stringsAsFactors = F)
as.character(amr$Group.1)
vir_and_amr = data.frame(PopPUNK_cluster = amr$Group.1,
amr = amr$x,
vir = vir$x,
pathotype = pathotype_per_cluster$Pathotype_label[match(as.character(amr$Group.1), pathotype_per_cluster$Pathotype_label)],
stringsAsFactors = F)
vir_and_amr = data.frame(PopPUNK_cluster = amr$Group.1,
amr = amr$x,
vir = vir$x,
pathotype = pathotype_per_cluster$Pathotype_label[match(as.character(amr$Group.1), pathotype_per_cluster$PopPUNK_cluster)],
stringsAsFactors = F)
ggplot(vir_and_amr, aes(x = amr, y = vir, color = pathotype)) + geom_point() + theme_bw(base_size = 14)
ggplot(vir_and_amr, aes(x = amr, y = vir, color = pathotype)) + geom_jitter() + theme_bw(base_size = 14)
ggplot(vir_and_amr, aes(x = amr, y = vir, color = pathotype)) + geom_jitter() + theme_bw(base_size = 14) +
scale_color_brewer(palette = "Set2")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype)) + geom_jitter(pch = 21, size = 2) + theme_bw(base_size = 14) +
scale_fill_brewer(palette = "Set2")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype)) + geom_jitter(pch = 21, size = 2) + theme_bw(base_size = 14) +
scale_fill_brewer(palette = "Set2", name = "Pathotype")
vir_and_amr$pathotype = factor(vir_and_amr$pathotype, c("ExPEC", "EHEC", "STEC","aEPEC/EPEC","EAEC","EIEC","No prevalent pathotype","ND"))
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype)) + geom_jitter(pch = 21, size = 2) + theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype)) + geom_jitter(pch = 21, size = 4) + theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_jitter(pch = 21, size = 4) + geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_jitter(pch = 21, size = 4) +
geom_text(nudge_x = 0.01)+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_jitter(pch = 21, size = 4) +
geom_text(nudge_x = -0.01)+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 4) +
geom_text(nudge_x = -0.01)+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text(nudge_x = -0.01)+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 2))
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1))
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2))
which(antibiotic_classes$PopPunk_cluster == 1)
curr = antibiotic_classes[which(antibiotic_classes$PopPunk_cluster == 1),]
View(curr)
table(curr$count)
table(curr$count)/dim(curr)[1]
round(0,table(curr$count)/dim(curr)[1])
round(table(curr$count)/dim(curr)[1], digits = 2)
curr$path = vir_per_isolate$num_genes[vir_per_isolate$PopPUNK_cluster == curr_cluster]
## try to make this as a bubble plot?
curr_cluster = 1
curr = antibiotic_classes[which(antibiotic_classes$PopPunk_cluster == curr_cluster),]
curr$path = vir_per_isolate$num_genes[vir_per_isolate$PopPUNK_cluster == curr_cluster]
table(curr$count, curr$path)
data.frame(table(curr$count, curr$path),stringsAsFactors = F)
res = data.frame(table(curr$count, curr$path),stringsAsFactors = F)
res$Freq res$Freq/dim(curr)[1]
res$Freq/dim(curr)[1]
sum(res$Freq/dim(curr)[1])
res$label = rep(unique(pathotype_per_cluster$Pathotype_label[which(pathotype_per_cluster$PopPUNK_cluster == curr_cluster)]),
dim(res)[1])
View(res)
res$Freq = res$Freq/dim(curr)[1]
res$label = rep(unique(pathotype_per_cluster$Pathotype_label[which(pathotype_per_cluster$PopPUNK_cluster == curr_cluster)]),
dim(res)[1])
res$name = paste(res$Var1, res$Var2, sep ="-")
old_res = res
View(old_res)
curr_cluster = 2
curr = antibiotic_classes[which(antibiotic_classes$PopPunk_cluster == curr_cluster),]
curr$path = vir_per_isolate$num_genes[vir_per_isolate$PopPUNK_cluster == curr_cluster]
res = data.frame(table(curr$count, curr$path),stringsAsFactors = F)
res$Freq = res$Freq/dim(curr)[1]
res$label = rep(unique(pathotype_per_cluster$Pathotype_label[which(pathotype_per_cluster$PopPUNK_cluster == curr_cluster)]),
dim(res)[1])
res$name = paste(res$Var1, res$Var2, sep ="-")
which(res$label %in% old_res$label)
which(res$name %in% old_res$name)
which(old_res$name %in% res$name)
res$Freq[match(old_res$name,res$name)]
in_both = res$Freq[match(old_res$name,res$name)]
in_both[which(is.na(in_both))] = 0
in_both
old_res = rbind(old_res, res[which(!res$name %in% old_res$name)])
old_res = rbind(old_res, res[which(!res$name %in% old_res$name),])
pathotype_per_cluster$PopPUNK_cluster
calc_props_one_cluster <- function(curr_cluster) {
curr = antibiotic_classes[which(antibiotic_classes$PopPunk_cluster == curr_cluster),]
curr$path = vir_per_isolate$num_genes[vir_per_isolate$PopPUNK_cluster == curr_cluster]
res = data.frame(table(curr$count, curr$path),stringsAsFactors = F)
res$Freq = res$Freq/dim(curr)[1]
res$name = paste(res$Var1, res$Var2, sep ="-")
return(res)
}
all_res = calc_props_one_cluster(pathotype_per_cluster$PopPUNK_cluster[1])
for (i in 2:length(pathotype_per_cluster$PopPUNK_cluster)){
res = calc_props_one_cluster(pathotype_per_cluster$PopPUNK_cluster[i])
in_both = res$Freq[match(all_res$name,res$name)]
in_both[which(is.na(in_both))] = 0
all_res$Freq = all_res$Freq + in_both
all_res = rbind(all_res, res[which(!res$name %in% all_res$name),])
}
dim(all_res)
View(old_res)
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point()
as.numeric(all_res$Var1)
all_res$Var1 = as.numeric(all_res$Var1)
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point()
all_res$Var1 = as.numeric(all_res$Var2)
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point()
all_res = calc_props_one_cluster(pathotype_per_cluster$PopPUNK_cluster[1])
for (i in 2:length(pathotype_per_cluster$PopPUNK_cluster)){
res = calc_props_one_cluster(pathotype_per_cluster$PopPUNK_cluster[i])
in_both = res$Freq[match(all_res$name,res$name)]
in_both[which(is.na(in_both))] = 0
all_res$Freq = all_res$Freq + in_both
all_res = rbind(all_res, res[which(!res$name %in% all_res$name),])
}
all_res$Var1 = as.numeric(all_res$Var1)
all_res$Var2 = as.numeric(all_res$Var2)
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point()
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point() +
scale_size_continuous(breaks = seq(from = 0, to = 2, by = 0.1))
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point() +
scale_size_continuous(breaks = seq(from = 0.1, to = 2, by = 0.1))
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point() +
scale_size_continuous(breaks = seq(from = 0.1, to = 2, by = 0.1), range = c(0,4))
ggplot(all_res, aes(x = Var1, y = Var2, size = Freq)) + geom_point() +
scale_size_continuous(breaks = seq(from = 0.1, to = 2, by = 0.1), range = c(0,9))
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2))
View(antibiotic_classes)
aggregate(x = antibiotic_classes$count, by = list(antibiotic_classes$PopPunk_cluster), FUN = max)
max_res = aggregate(x = antibiotic_classes$count, by = list(antibiotic_classes$PopPunk_cluster), FUN = max)
max_res$Group.1[which(max_res$x) < 3]
max_res$Group.1[which(max_res$x < 3)]
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median antimicrobial classes per isolate") +
ylab("Median number of virulence factors per isolate")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.3) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_jitter(pch = 21, size = 8,alpha = 0.7) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
pd <- position_dodge(0.1)
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
pd <- position_dodge(0.4)
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
pd <- position_dodge(1)
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_classic(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
pd <- position_dodge(0.8)
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_classic(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
pd <- position_dodge(1/5)
pd <- position_dodge(1.5)
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_classic(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
pd <- position_dodge(0.3)
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_classic(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8,alpha = 0.7, position = pd) +
geom_text(position = pd)+
theme_classic(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate") +
geom_vline(xintercept = 3, lty = 2, colour = "red")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8, position = pd) +
geom_text(position = pd)+
theme_classic(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate") +
geom_vline(xintercept = 3, lty = 2, colour = "red")
ggplot(vir_and_amr, aes(x = amr, y = vir, fill = pathotype, label = PopPUNK_cluster)) + geom_point(pch = 21, size = 8) +
geom_text()+
theme_bw(base_size = 14) +
scale_fill_manual(values = c( brewer.pal(n=7, "Set2"), NA), name = "Pathotype") +
scale_x_continuous(breaks = seq(from=0, to = 9, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to = max(vir$x), by = 2)) + xlab("Median number of antimicrobial classes each isolate is resistant to") +
ylab("Median number of virulence factors per isolate") +
geom_vline(xintercept = 3, lty = 2, colour = "red")
