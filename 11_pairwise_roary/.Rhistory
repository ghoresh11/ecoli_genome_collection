strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
strain1
strain2
dist = toxins[i,] - toxins[j,]
dist
dist = abs(toxins[i,] - toxins[j,])
dist
dist = sum(abs(toxins[i,] - toxins[j,]))
dist
TA_dist_mat = data.frame(matrix(0 , nrow = 260, ncol = 260), stringsAsFactors = F )
row.names(TA_dist_mat) = rownames(toxins)
colnames(TA_dist_mat) = rownames(toxins)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
strain1 = rownames(toxins)[i]
strain2 = rownames(toxins)[j]
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j]
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
print(dist)
}
}
}
View(TA_dist_mat)
TA_dist_mat = matrix(0 , nrow = 260, ncol = 260)
for (i in 1:dim(toxins)[1]){
for (j in i:dim(toxins)[1]) {
if (i!=j){
dist = sum(abs(toxins[i,] - toxins[j,]))
TA_dist_mat[i,j] = dist
TA_dist_mat[j,i] = dist
}
}
}
View(TA_dist_mat)
hist(lower.tri(TA_dist_mat))
hist(as.numeric(unlist(lower.tri(TA_dist_mat))))
lower.tri(TA_dist_mat)
hist(as.numeric(unlist(lower.tri(TA_dist_mat[TA_dist_mat]))))
TA_dist_mat[lower.tri(TA_dist_mat)
]
hist(as.numeric(unlist(TA_dist_mat[lower.tri(TA_dist_mat)])))
hist(as.numeric(unlist(TA_dist_mat)), main = "Distance between every two strains", xlab="Distance")
order = read.table("/Users/gh11/Desktop/new phd prop/order.txt",sep="",comment.char = "")
View(order)
t = rnorm(n = 1000,mean = 100, sd = 10)
hist(t, xlab = "Length",main="", breaks = 25)
install.packages('scatterpie')
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
View(klebs)
unique(klebs$ST..MLST.)
length(unique(klebs$ST..MLST.))
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
unique(klebs$taxonomic_designation)
klebs_species = unique(klebs$taxonomic_designation)
klebs = read.table("/Users/gh11/Submissions/my_thesis/intro/BIGSdb_100120_all_klebsiellaSTs.txt",sep = "\t", header = T, stringsAsFactors = F)
klebs_species = unique(klebs$taxonomic_designation)
for (s in klebs_species) {
curr = klebs[klebs$taxonomic_designation == s,]
print(s)
print(length(unique(curr$ST..MLST.)))
}
shiny::runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
runApp('HELICON/helicon/gene_report')
setwd("/Users/gh11/alyce_salmonella/")
library(dplyr)
library(ggplot2)
require(scales)
library(utils)
library(RColorBrewer)
## Step 1: Read the input files
presence_absence_tab = read.table("gene_presence_absence.Rtab", sep = "\t", comment.char = "", stringsAsFactors = F, header = F, row.names = 1)
presence_absence_csv = read.table("gene_presence_absence.csv", sep = ",", comment.char = "", stringsAsFactors = F, header = F)
md = read.table("global_metadata_biotype-only.csv", sep = ",", stringsAsFactors = F, header = T, comment.char = "")
## Im writing a function that gets the biotype as the input, then it does the exact set of commands written above
get_gene_frequencies <- function(biotype) {
indexes = which(presence_absence_tab[1,] %in% md$Isolate[md$Biotype == biotype]) ## get the rows that are the specific biotype
gene_counts = presence_absence_tab[,indexes] ## get all the relveant columns
gene_counts = gene_counts[-1,] # remove first row with the strain names
gene_counts_numeric <- mutate_all(gene_counts, function(x) as.numeric(as.character(x))) ## annoyingly it's not numeric, so just need to convert it
rownames(gene_counts_numeric) = rownames(gene_counts) ## give back the gene names to each row
colnames(gene_counts_numeric) = presence_absence_tab[1,][indexes] ## sanity check, adding the strain names
## sanity check for ParaB -> should return 1
## print(gene_counts_numeric[which(rownames(gene_counts_numeric) == "group_944"),which(colnames(gene_counts_numeric) == "11893_2#70")])
gene_frequencies = rowSums(gene_counts_numeric) / length(indexes) ## the frequency of each gene is the sum of the rows divided by the size of the  group
return(gene_frequencies)
}
## now it's very easy to run on both:
java_gene_frequencies = get_gene_frequencies("Java")
parab_gene_frequencies =  get_gene_frequencies("ParaB")
## calculate the difference in frequency between the two
diff_freq = java_gene_frequencies - parab_gene_frequencies
## I define specific to one if the difference betweent the frequencies is 0.95 or more
specific_to_java = names(java_gene_frequencies)[which(diff_freq >= 0.95)]
specific_to_parab = names(parab_gene_frequencies)[which(diff_freq <= -0.95)]
## initiate a summary of all the distances between every two genes for all the genomes, with every combination of two genes
init_summary_df <- function(biotype, specific_to_biotype) {
curr_summary = data.frame(cbind(t(combn(x = specific_to_biotype, m = 2)),
data.frame(matrix(nrow = choose(length(specific_to_biotype), 2),
ncol = length(which(md$Biotype == biotype))))), stringsAsFactors = F)
colnames(curr_summary) = c("geneA","geneB",md$Isolate[md$Biotype == biotype])
return(curr_summary)
}
summary_java = init_summary_df("Java", specific_to_java)
summary_paraB = init_summary_df("ParaB", specific_to_parab)
## special function to read a GFF file
## because comments are "##" but there's a hash in the lane ID I needed to hack a solution to change all "##" to "%"
## then use "%" as the comment character. Also then I filtered to only include lines with a CDS, so the sequence at the end
## is removed, then I apply more manipulations to make it easier to work with
read_gff<- function(file) {
clean.lines <- sub(paste0("##"), "%", readLines(file)) ## rewrite "##" as "%"
df = read.csv(text = paste(clean.lines, collapse = "\n"), comment.char = "%", sep= "\t", stringsAsFactors = F,header = F,  quote = "") # read the file, ignore lines with "%"
## I'm renaming the column names so the code is cleaer
colnames(df) = c("contig","tool","type","start","stop","nothing","strand","nothing2","desc")
df = df[-which(df$type != "CDS"),] ## only CDS
## the name of the gene in this file is the in the desc column, but it needs to be manipulated to get the exact name
df$gene_id =  sapply(X = strsplit(x = df$desc, split = ";", fixed = T ), FUN = head, n = 1) ## here are all the gene IDs, you split the column by ";" and get the first item
df$gene_id = sapply(X = df$gene_id, FUN=gsub, pattern = "ID=",replacement = "") ## remove the "ID="
return(df)
}
gff_files = list.files("gffs/", full.names = T)
gff_files
curr_gff_file = "gffs//11893_2#70.gff"
print(curr_gff_file)
## read the GFF -> I had to write a function because the comment character is 2 hashes not one, and you can't do that
## in the built in read.table function
genome_name = gsub(x = basename(curr_gff_file), pattern = ".gff", replacement = "") ## getting the current name of the genome
if (!genome_name %in% md$Isolate) { ## if for any reason the genome isn't in the metadata file, move on
print(paste("Could not locate ---", genome_name, "--- in the metadata file, skipping!", sep = ""))
next
}
curr_biotype = md$Biotype[md$Isolate == genome_name] ## getting the current biotype
curr_df = read_gff(curr_gff_file) ## read the gff file
## if it's a Java isolate, find all the java specific genes, otherwise all the paraB specific
if (curr_biotype == "Java") {
curr_genes = specific_to_java
curr_summary = summary_java
} else {
curr_genes = specific_to_parab
curr_summary = summary_paraB
}
## now I can get the IDs of these genes for this isolate in from the CSV file
isolate_column = which(presence_absence_csv[1,] == genome_name)
gene_rows = which(presence_absence_csv[,1] %in% curr_genes)
geneIDs_in_curr_isolate = presence_absence_csv[gene_rows, isolate_column]
## if you print geneIDs_in_curr_isolate you'll see it's exactly what we need, Java specific genes that are missing in ParaB
## now I'll add this info to the GFF df
curr_df$specific = rep(0,dim(curr_df)[1])
curr_df$specific[curr_df$gene_id %in% geneIDs_in_curr_isolate] = 1
## add the actual name of the gene to the dataframe, needed to be added to the summary
curr_df$gene_name = presence_absence_csv$V1[match(curr_df$gene_id, presence_absence_csv[,isolate_column])]
## Now we only really care about the contigs where the specific genes are, so I will filter the dataframe to only include those contigs
interesting_contigs = unique(curr_df$contig[which(curr_df$specific == 1)]) ## list of contigs
## filter the gff dataframe to only have these contigs (could be 1 or multiple...)
curr_df = curr_df[curr_df$contig %in% interesting_contigs,]
curr_df$index = 1:dim(curr_df)[1]
## the most fun part -> plot the results for a single GFF file...
curr_df$diff = diff_freq[match(curr_df$gene_name,names(diff_freq))]
if (curr_biotype == "ParaB") {
curr_df$diff = -curr_df$diff
}
curr_df$specific = curr_df$diff
other_bio = "Java"
if (curr_biotype == "Java") {
other_bio = "ParaB"
}
# ## this needs to be fixed in case there are multiple contigs
curr_df$index = factor(curr_df$index, curr_df$index)
ggplot(curr_df, aes(x = index, y = specific)) + geom_bar(stat = "identity", color = "black", size = 0.1) +
facet_grid(~contig, scales = "free_x") +
xlab("Index on contig") + ylab(paste("Frequency(", curr_biotype, ")-Frequency(", other_bio, ")",sep = "")) +
theme_classic(base_size = 14) +
scale_y_continuous(expand = c(0.05,0,0.05,0), breaks = c(0,1)) +
ggtitle(paste(genome_name, "(",curr_biotype,")", sep ="")) +
scale_x_discrete(labels = curr_df$gene_name) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = c(0,1), lty = 2)
ggplot(curr_df, aes(x = index, y = specific)) + geom_bar(stat = "identity", color = "black", size = 0.1) +
facet_grid(~contig, scales = "free_x") +
xlab("Index on contig") + ylab(paste("Frequency(", curr_biotype, ")-Frequency(", other_bio, ")",sep = "")) +
theme_classic(base_size = 14) +
scale_y_continuous(expand = c(0.05,0,0.05,0), breaks = c(0,1)) +
ggtitle(paste(genome_name, "(",curr_biotype,")", sep ="")) +
scale_x_discrete(labels = curr_df$gene_name) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = c(0,0.95,1), lty = 2)
ggplot(curr_df, aes(x = index, y = specific)) + geom_bar(stat = "identity", color = "black", size = 0.1) +
facet_grid(~contig, scales = "free_x") +
xlab("Index on contig") + ylab(paste("Frequency(", curr_biotype, ")-Frequency(", other_bio, ")",sep = "")) +
theme_classic(base_size = 14) +
scale_y_continuous(expand = c(0.05,0,0.05,0), breaks = c(0,0.95,1)) +
ggtitle(paste(genome_name, "(",curr_biotype,")", sep ="")) +
scale_x_discrete(labels = curr_df$gene_name) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = c(0,0.95,1), lty = 2)
gff_files
curr_gff_file = gff_files[3]
print(curr_gff_file)
## read the GFF -> I had to write a function because the comment character is 2 hashes not one, and you can't do that
## in the built in read.table function
genome_name = gsub(x = basename(curr_gff_file), pattern = ".gff", replacement = "") ## getting the current name of the genome
if (!genome_name %in% md$Isolate) { ## if for any reason the genome isn't in the metadata file, move on
print(paste("Could not locate ---", genome_name, "--- in the metadata file, skipping!", sep = ""))
next
}
curr_biotype = md$Biotype[md$Isolate == genome_name] ## getting the current biotype
curr_df = read_gff(curr_gff_file) ## read the gff file
## if it's a Java isolate, find all the java specific genes, otherwise all the paraB specific
if (curr_biotype == "Java") {
curr_genes = specific_to_java
curr_summary = summary_java
} else {
curr_genes = specific_to_parab
curr_summary = summary_paraB
}
## now I can get the IDs of these genes for this isolate in from the CSV file
isolate_column = which(presence_absence_csv[1,] == genome_name)
gene_rows = which(presence_absence_csv[,1] %in% curr_genes)
geneIDs_in_curr_isolate = presence_absence_csv[gene_rows, isolate_column]
## if you print geneIDs_in_curr_isolate you'll see it's exactly what we need, Java specific genes that are missing in ParaB
## now I'll add this info to the GFF df
curr_df$specific = rep(0,dim(curr_df)[1])
curr_df$specific[curr_df$gene_id %in% geneIDs_in_curr_isolate] = 1
## add the actual name of the gene to the dataframe, needed to be added to the summary
curr_df$gene_name = presence_absence_csv$V1[match(curr_df$gene_id, presence_absence_csv[,isolate_column])]
## Now we only really care about the contigs where the specific genes are, so I will filter the dataframe to only include those contigs
interesting_contigs = unique(curr_df$contig[which(curr_df$specific == 1)]) ## list of contigs
## filter the gff dataframe to only have these contigs (could be 1 or multiple...)
curr_df = curr_df[curr_df$contig %in% interesting_contigs,]
curr_df$index = 1:dim(curr_df)[1]
curr_df
## the most fun part -> plot the results for a single GFF file...
curr_df$diff = diff_freq[match(curr_df$gene_name,names(diff_freq))]
if (curr_biotype == "ParaB") {
curr_df$diff = -curr_df$diff
}
curr_df$specific = curr_df$diff
other_bio = "Java"
if (curr_biotype == "Java") {
other_bio = "ParaB"
}
if (length(interesting_contigs) > 0) {
# ## this needs to be fixed in case there are multiple contigs
curr_df$index = 1:dim(curr_df)[1]
curr_df$index = factor(curr_df$index, curr_df$index)
ggplot(curr_df, aes(x = index, y = specific)) + geom_bar(stat = "identity", color = "black", size = 0.1) +
facet_grid(~contig, scales = "free_x") +
xlab("Index on contig") + ylab(paste("Frequency(", curr_biotype, ")-Frequency(", other_bio, ")",sep = "")) +
theme_classic(base_size = 14) +
scale_y_continuous(expand = c(0.05,0,0.05,0), breaks = c(0,0.95,1)) +
ggtitle(paste(genome_name, "(",curr_biotype,")", sep ="")) +
scale_x_discrete(labels = curr_df$gene_name) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = c(0,0.95,1), lty = 2)
#  ggsave, not so important at the moment
ggsave(p, file = file.path("plots",paste(genome_name,".pdf",sep="")),height = 6, width = dim(curr_df)[1]/20)
}
gff_files = list.files("gffs/", full.names = T)
for (curr_gff_file in gff_files) {
print(curr_gff_file)
## read the GFF -> I had to write a function because the comment character is 2 hashes not one, and you can't do that
## in the built in read.table function
genome_name = gsub(x = basename(curr_gff_file), pattern = ".gff", replacement = "") ## getting the current name of the genome
if (!genome_name %in% md$Isolate) { ## if for any reason the genome isn't in the metadata file, move on
print(paste("Could not locate ---", genome_name, "--- in the metadata file, skipping!", sep = ""))
next
}
curr_biotype = md$Biotype[md$Isolate == genome_name] ## getting the current biotype
curr_df = read_gff(curr_gff_file) ## read the gff file
## if it's a Java isolate, find all the java specific genes, otherwise all the paraB specific
if (curr_biotype == "Java") {
curr_genes = specific_to_java
curr_summary = summary_java
} else {
curr_genes = specific_to_parab
curr_summary = summary_paraB
}
## now I can get the IDs of these genes for this isolate in from the CSV file
isolate_column = which(presence_absence_csv[1,] == genome_name)
gene_rows = which(presence_absence_csv[,1] %in% curr_genes)
geneIDs_in_curr_isolate = presence_absence_csv[gene_rows, isolate_column]
## if you print geneIDs_in_curr_isolate you'll see it's exactly what we need, Java specific genes that are missing in ParaB
## now I'll add this info to the GFF df
curr_df$specific = rep(0,dim(curr_df)[1])
curr_df$specific[curr_df$gene_id %in% geneIDs_in_curr_isolate] = 1
## it's not showing presence/absence in this isolate, it's showing which genes are in this isolate but missing in the OTHER biotype
## add the actual name of the gene to the dataframe, needed to be added to the summary
curr_df$gene_name = presence_absence_csv$V1[match(curr_df$gene_id, presence_absence_csv[,isolate_column])]
## Now we only really care about the contigs where the specific genes are, so I will filter the dataframe to only include those contigs
interesting_contigs = unique(curr_df$contig[which(curr_df$specific == 1)]) ## list of contigs
## filter the gff dataframe to only have these contigs (could be 1 or multiple...)
curr_df = curr_df[curr_df$contig %in% interesting_contigs,]
## the most fun part -> plot the results for a single GFF file...
curr_df$diff = diff_freq[match(curr_df$gene_name,names(diff_freq))]
if (curr_biotype == "ParaB") {
curr_df$diff = -curr_df$diff
}
curr_df$specific = curr_df$diff
other_bio = "Java"
if (curr_biotype == "Java") {
other_bio = "ParaB"
}
if (length(interesting_contigs) > 0) {
# ## this needs to be fixed in case there are multiple contigs
curr_df$index = 1:dim(curr_df)[1]
curr_df$index = factor(curr_df$index, curr_df$index)
p = ggplot(curr_df, aes(x = index, y = specific)) + geom_bar(stat = "identity", color = "black", size = 0.1) +
facet_grid(~contig, scales = "free_x") +
xlab("Index on contig") + ylab(paste("Frequency(", curr_biotype, ")-Frequency(", other_bio, ")",sep = "")) +
theme_classic(base_size = 14) +
scale_y_continuous(expand = c(0.05,0,0.05,0), breaks = c(0,0.95,1)) +
ggtitle(paste(genome_name, "(",curr_biotype,")", sep ="")) +
scale_x_discrete(labels = curr_df$gene_name) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = c(0,0.95,1), lty = 2)
#  ggsave, not so important at the moment
ggsave(p, file = file.path("plots",paste(genome_name,".pdf",sep="")),height = 6, width = dim(curr_df)[1]/20)
}
## fill out the details in the summary dataframe
curr_column = which(colnames(curr_summary) == genome_name)
for (i in 1:dim(curr_summary)[1]) {
## Check if both genes are present in this isolate's GFF file
if ((!curr_summary$geneA[i] %in% curr_df$gene_name)  || (!curr_summary$geneB[i] %in% curr_df$gene_name)) {
curr_summary[i, curr_column] = "Missing_in_one"
next
} ## check if the two genes are on the same contig
if (curr_df$contig[which(curr_df$gene_name == curr_summary$geneA[i])] !=
curr_df$contig[which(curr_df$gene_name == curr_summary$geneB[i])]) {
curr_summary[i, curr_column] = "Diff_contigs"
next
}
## on same contig - measure the difference between them in the dataframe in terms of index
curr_summary[i,curr_column] = abs(which(curr_df$gene_name == curr_summary$geneA[i]) - which(curr_df$gene_name == curr_summary$geneB[i]))
}
## don't forget to update the relevant results
if (curr_biotype == "Java") {
summary_java = curr_summary
} else {
summary_paraB = curr_summary
}
}
gff_files = list.files("gffs/", full.names = T)
for (curr_gff_file in gff_files) {
print(curr_gff_file)
## read the GFF -> I had to write a function because the comment character is 2 hashes not one, and you can't do that
## in the built in read.table function
genome_name = gsub(x = basename(curr_gff_file), pattern = ".gff", replacement = "") ## getting the current name of the genome
if (!genome_name %in% md$Isolate) { ## if for any reason the genome isn't in the metadata file, move on
print(paste("Could not locate ---", genome_name, "--- in the metadata file, skipping!", sep = ""))
next
}
curr_biotype = md$Biotype[md$Isolate == genome_name] ## getting the current biotype
curr_df = read_gff(curr_gff_file) ## read the gff file
## if it's a Java isolate, find all the java specific genes, otherwise all the paraB specific
if (curr_biotype == "Java") {
curr_genes = specific_to_java
curr_summary = summary_java
} else {
curr_genes = specific_to_parab
curr_summary = summary_paraB
}
## now I can get the IDs of these genes for this isolate in from the CSV file
isolate_column = which(presence_absence_csv[1,] == genome_name)
gene_rows = which(presence_absence_csv[,1] %in% curr_genes)
geneIDs_in_curr_isolate = presence_absence_csv[gene_rows, isolate_column]
## if you print geneIDs_in_curr_isolate you'll see it's exactly what we need, Java specific genes that are missing in ParaB
## now I'll add this info to the GFF df
curr_df$specific = rep(0,dim(curr_df)[1])
curr_df$specific[curr_df$gene_id %in% geneIDs_in_curr_isolate] = 1
## it's not showing presence/absence in this isolate, it's showing which genes are in this isolate but missing in the OTHER biotype
## add the actual name of the gene to the dataframe, needed to be added to the summary
curr_df$gene_name = presence_absence_csv$V1[match(curr_df$gene_id, presence_absence_csv[,isolate_column])]
## Now we only really care about the contigs where the specific genes are, so I will filter the dataframe to only include those contigs
interesting_contigs = unique(curr_df$contig[which(curr_df$specific == 1)]) ## list of contigs
## filter the gff dataframe to only have these contigs (could be 1 or multiple...)
curr_df = curr_df[curr_df$contig %in% interesting_contigs,]
## the most fun part -> plot the results for a single GFF file...
curr_df$diff = diff_freq[match(curr_df$gene_name,names(diff_freq))]
if (curr_biotype == "ParaB") {
curr_df$diff = -curr_df$diff
}
curr_df$specific = curr_df$diff
other_bio = "Java"
if (curr_biotype == "Java") {
other_bio = "ParaB"
}
if (length(interesting_contigs) > 0) {
# ## this needs to be fixed in case there are multiple contigs
curr_df$index = 1:dim(curr_df)[1]
curr_df$index = factor(curr_df$index, curr_df$index)
p = ggplot(curr_df, aes(x = index, y = specific)) + geom_bar(stat = "identity", color = "black", size = 0.1) +
facet_grid(~contig, scales = "free_x") +
xlab("Index on contig") + ylab(paste("Frequency(", curr_biotype, ")-Frequency(", other_bio, ")",sep = "")) +
theme_classic(base_size = 14) +
scale_y_continuous(expand = c(0.05,0,0.05,0), breaks = c(0,0.95,1)) +
ggtitle(paste(genome_name, "(",curr_biotype,")", sep ="")) +
scale_x_discrete(labels = curr_df$gene_name) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(yintercept = c(0,0.95,1), lty = 2)
#  ggsave, not so important at the moment
ggsave(p, file = file.path("plots",paste(genome_name,".pdf",sep="")),height = 6, width = dim(curr_df)[1]/20)
}
## fill out the details in the summary dataframe
curr_column = which(colnames(curr_summary) == genome_name)
for (i in 1:dim(curr_summary)[1]) {
## Check if both genes are present in this isolate's GFF file
if ((!curr_summary$geneA[i] %in% curr_df$gene_name)  || (!curr_summary$geneB[i] %in% curr_df$gene_name)) {
curr_summary[i, curr_column] = "Missing_in_one"
next
} ## check if the two genes are on the same contig
if (curr_df$contig[which(curr_df$gene_name == curr_summary$geneA[i])] !=
curr_df$contig[which(curr_df$gene_name == curr_summary$geneB[i])]) {
curr_summary[i, curr_column] = "Diff_contigs"
next
}
## on same contig - measure the difference between them in the dataframe in terms of index
curr_summary[i,curr_column] = abs(which(curr_df$gene_name == curr_summary$geneA[i]) - which(curr_df$gene_name == curr_summary$geneB[i]))
}
## don't forget to update the relevant results
if (curr_biotype == "Java") {
summary_java = curr_summary
} else {
summary_paraB = curr_summary
}
}
library(ggplot2)
library(RColorBrewer)
library(vegan)
library(gridExtra)
library(ggpubr)
library(ggtree)
library(reshape2)
library(ape)
setwd("/Users/gh11/poppunk_pangenome/4_pairwise_roary/")
variable_order = c("rare","inter", "core")
## graphics
graphics = read.table("/Users/gh11/Submissions/my_thesis/Chapter3/figures/cluster_graphics.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
freqs = read.table("231019_corrected//freqs.csv", header = T,row.names = 1,
stringsAsFactors = F, comment.char = "", quote = "", sep =",")
## graphics
graphics = read.table("/Users/gh11/Submissions/my_thesis/Chapter4//figures/cluster_graphics.csv", sep = ",",
header = T, comment.char = "", stringsAsFactors = F)
freqs = read.table("231019_corrected//freqs.csv", header = T,row.names = 1,
stringsAsFactors = F, comment.char = "", quote = "", sep =",")
freqs = freqs[,-which(colnames(freqs) == "X50")]
clusters = sapply(X = colnames(freqs), FUN = gsub, pattern = "X", replacement = "")
graphics = graphics[match(clusters, graphics$Cluster),]
o = clusters
phylo_order = c("B1","A","C","E","D","B2","F","U")
create_pca_plot <- function(curr_freqs){
for_pca = t(curr_freqs)
remove = c()
for (i in 1:dim(for_pca)[2]) {
if (length(unique(for_pca[,i])) == 1) { ## no variation in gene
remove = c(remove, i)
}
}
for_pca = for_pca[,-remove]
### PCA plot of the clusters -> what are the relationships between the clusters based on the frequencies of all genes
freqs.pca = prcomp(for_pca , center = T)
summary(freqs.pca)
freqs.pca = data.frame(freqs.pca$x)
freqs.pca = cbind(freqs.pca, Cluster = as.character(o))
freqs.pca$Cluster = factor(freqs.pca$Cluster, o)
return (freqs.pca)
}
freqs.pca = create_pca_plot(freqs)
## PCA plot
ggplot(freqs.pca, aes(x = PC1, y = PC2, color = Cluster, shape = Cluster)) + geom_point(size = 3.5, stroke = 1, alpha = 0.7) +
scale_color_manual(values = graphics$Color, guide = F) + theme_bw(base_size = 12) +
geom_text(aes(label=Cluster),hjust=-0.3, vjust=-0.3) +
scale_shape_manual(values =  graphics$Shape, guide = F) + ggtitle("C")  +
annotate("text", x = -12, y = 1, label = "B1", size = 5, parse = T) +
annotate("text", x = 0.16, y = 0.02 , label = "A", size = 5, parse = T) +
annotate("text", x = -8, y = -8 , label = "E", size = 5,parse = T)+
annotate("text", x = 8, y = -11 , label = "F", size = 5,parse = T)+
annotate("text", x = -3, y = -13 , label = "D", size = 5,parse = T)+
annotate("text", x = 10, y = 4 , label = "B2", size = 5,parse = T)
View(freqs.pca)
graphics$Phylogroup[match(freqs.pca$Cluster, graphics$Cluster)]
freqs.pca$phylogroup = graphics$Phylogroup[match(freqs.pca$Cluster, graphics$Cluster)]
ggplot(freqs.pca, aes(x = PC1, y = PC2, color = phylogroup)) + geom_point(size = 3) +
theme_bw(base_size = 14) + scale_fill_brewer(palette = "Dark2")
ggplot(freqs.pca, aes(x = PC1, y = PC2, fill = phylogroup)) + geom_point(size = 3, pch = 21, color = 'black') +
theme_bw(base_size = 14) + scale_fill_brewer(palette = "Dark2")
ggplot(freqs.pca, aes(x = PC1, y = PC2, fill = phylogroup)) + geom_point(size = 3, pch = 21, color = 'black') +
theme_bw(base_size = 14) + scale_fill_brewer(palette = "Set")
ggplot(freqs.pca, aes(x = PC1, y = PC2, fill = phylogroup)) + geom_point(size = 3, pch = 21, color = 'black') +
theme_bw(base_size = 14) + scale_fill_brewer(palette = "Set2")
ggplot(freqs.pca, aes(x = PC1, y = PC2, fill = phylogroup)) + geom_point(size = 3, pch = 21, color = 'black') +
theme_bw(base_size = 14) + scale_fill_brewer(palette = "Set2", name = "Phylogroup") +
theme(legend.position = "bottom")
